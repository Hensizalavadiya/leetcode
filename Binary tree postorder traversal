# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: List[int]
        """
        if root is None:
            return []

        ans, stack = [], []
        last_visited_node = None

        while stack or root:
            if root:
                stack.append(root)
                root = root.left
            else:
                peek_node = stack[-1]
                # If the right child exists and traversing node from left child, move to right child
                if peek_node.right and last_visited_node != peek_node.right:
                    root = peek_node.right
                else:
                    ans.append(peek_node.val)
                    last_visited_node = stack.pop()

        return ans
        
