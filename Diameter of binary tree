# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        
class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        self.diameter = 0
        
        def maxDepth(node: TreeNode) -> int:
            if not node:
                return 0
            
            left_depth = maxDepth(node.left)
            right_depth = maxDepth(node.right)
            
            # Update the diameter if the path through the current node is larger
            self.diameter = max(self.diameter, left_depth + right_depth)
            
            # Return the depth of the tree rooted at this node
            return max(left_depth, right_depth) + 1
        
        maxDepth(root)
        return self.diameter
        
