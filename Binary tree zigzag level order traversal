# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: List[List[int]]
        """
        if not root:
            return []

        result = []
        dq = deque([root])
        isLeftToRight = True

        while dq:
            level_size = len(dq)
            curr_level = []

            for _ in range(level_size):
                if isLeftToRight:
                    node = dq.popleft()
                    curr_level.append(node.val)
                    if node.left:
                        dq.append(node.left)
                    if node.right:
                        dq.append(node.right)
                else:
                    node = dq.pop()
                    curr_level.append(node.val)
                    if node.right:
                        dq.appendleft(node.right)
                    if node.left:
                        dq.appendleft(node.left)

            result.append(curr_level)
            isLeftToRight = not isLeftToRight  # Toggle the direction

        return result
