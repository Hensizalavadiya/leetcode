# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: Optional[ListNode]
        :type k: int
        :rtype: Optional[ListNode]
        """
        if not head or not head.next:
            return head

        length = 0
        tail = head
        while tail:
            length += 1
            tail = tail.next

        k %= length
        if k == 0:
            return head

        fast = slow = head
        for _ in range(k):
            fast = fast.next

        while fast.next:
            fast, slow = fast.next, slow.next

        new_head = slow.next
        slow.next = None
        fast.next = head

        return new_head
